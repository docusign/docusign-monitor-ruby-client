=begin
#Monitor API

#An API for an integrator to access the features of DocuSign Monitor

OpenAPI spec version: v2.0
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module DocuSign_Monitor

  class GetStreamOptions
    # Specifies a pointer into the dataset where your query will begin. You can either provide an ISO DateTime or a string cursor (from the `endCursor` value in the response). If no value is provided, the query begins from seven days ago.  For example, to fetch event data beginning from January 1, 2022, set this value to `2022-01-01T00:00:00Z`. The response will include data about events starting from that date in chronological order. The response also includes an `endCursor` property. To fetch the next page of event data, call this endpoint again with `cursor` set to the previous `endCursor` value. 
    attr_accessor :cursor

    # The maximum number of records to return. The default value is 1000.
    attr_accessor :limit

    def self.default
      @@default ||= GetStreamOptions.new
    end
  end


  class DataSetApi
    attr_accessor :api_client

    def initialize(api_client = DataSetApi.default)
      @api_client = api_client
    end

    # Gets customer event data for an organization.
    # Gets customer event data for the organization that owns the integration key.  The results for this endpoint are paginated by event timestamp. Use the `cursor` parameter to specify where the query begins in the dataset. Use the `limit` parameter to set the number of records returned. 
    # @param data_set_name Must be `monitor`.
    # @param version Must be `2`. 
    # @param DocuSign_Monitor::GetStreamOptions Options for modifying the behavior of the function.
    # @return [CursoredResult]
    def get_stream(data_set_name, version, options = DocuSign_Monitor::GetStreamOptions.default)
      data, _status_code, _headers = get_stream_with_http_info(data_set_name, version, options)
      return data
    end

    # Gets customer event data for an organization.
    # Gets customer event data for the organization that owns the integration key.  The results for this endpoint are paginated by event timestamp. Use the &#x60;cursor&#x60; parameter to specify where the query begins in the dataset. Use the &#x60;limit&#x60; parameter to set the number of records returned. 
    # @param data_set_name Must be `monitor`.
    # @param version Must be `2`. 
    # @param DocuSign_Monitor::GetStreamOptions Options for modifying the behavior of the function.
    # @return [Array<(CursoredResult, Fixnum, Hash)>] CursoredResult data, response status code and response headers
    def get_stream_with_http_info(data_set_name, version, options = DocuSign_Monitor::GetStreamOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataSetApi.get_stream ..."
      end
      # verify the required parameter 'data_set_name' is set
      fail ArgumentError, "Missing the required parameter 'data_set_name' when calling DataSetApi.get_stream" if data_set_name.nil?
      # verify the required parameter 'version' is set
      fail ArgumentError, "Missing the required parameter 'version' when calling DataSetApi.get_stream" if version.nil?
      # resource path
      local_var_path = "/api/v{version}/datasets/{dataSetName}/stream".sub('{format}','json').sub('{' + 'dataSetName' + '}', data_set_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = options.cursor if !options.cursor.nil?
      query_params[:'limit'] = options.limit if !options.limit.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CursoredResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataSetApi#get_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end